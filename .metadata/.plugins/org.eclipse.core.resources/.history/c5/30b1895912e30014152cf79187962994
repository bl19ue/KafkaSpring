buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.4.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea' 
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

jar {
    baseName = 'myvote'
    version = '0.1.0'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}


dependencies {
	compile("org.springframework.boot:spring-boot-starter-web"){
		exclude module: "spring-boot-starter-tomcat"
	    exclude module: "spring-boot-starter-logging"
	    exclude module: "logback-classic"
	}
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("org.springframework.hateoas:spring-hateoas")
    compile("org.springframework.plugin:spring-plugin-core:1.1.0.RELEASE")
    compile("com.jayway.jsonpath:json-path:0.9.1")
    compile("org.json:json:20090211")
    compile("com.googlecode.json-simple:json-simple:1.1")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    
    testCompile("org.springframework.boot:spring-boot-starter-test") 
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->

        if (details.requested.name == 'commons-logging') {
    		details.useTarget "org.slf4j:jcl-over-slf4j:1.7.5"
		}
    }
}